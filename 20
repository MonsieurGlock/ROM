/*
  Use the I2C bus with EEPROM device
  EEPROM 8 (Vcc) to Vcc
  EEPROM 4 (GND) to GND
  EEPROM 5 (SDA) to Arduino Analog Pin 4(SDA)
  EEPROM 6 (SCL) to Arduino Analog Pin 5(SCL)
  EEPROM 7 (WP) to GND
  /* Memory length in bytes
  24C01 = 128
  24C02 = 256
  24C04 = 512
  24C08 = 1024
  24C16 = 2048
  24C64 = 8192
  24C128= 16384
  24C256= 32768
*/
#define memorylength 512
#include <Wire.h>
byte deviceAddress; // Address of EEPROM chip
unsigned int eepromAddress;
void writeEEPROM_byte(int device, unsigned int address, byte data );
byte readEEPROM_byte(int device, unsigned int address );
bool checkEEPROM(byte device, unsigned address, unsigned length);
void writeEEPROM_page(int device, unsigned int address, byte* buffer, byte length );

bool buttonTask = 0;
int reButton=7;
int wrButton=8;

void setup()
{
  pinMode(reButton , INPUT);
  pinMode(wrButton , INPUT);
   pinMode(10 , OUTPUT);
  pinMode(11 , OUTPUT);
  byte eepromData;
  byte i;
  Serial.begin(9600); // Setup serial for debug
  Wire.begin(); // Start I2C bus
  for (i = 1; i < 127; i++ ) // sets the value (range from 1 to 127)
  {
    Wire.beginTransmission(i); // transmit to device
    if (Wire.endTransmission() == 0) // I2C devices found
    {
      deviceAddress = i;
      Serial.print("I2C Device Address: "); // Print Device Address
      Serial.println(deviceAddress, HEX); // print as an ASCII-encoded hexa);
    }

  }
  eepromAddress = 0;
  eepromData = 128;
  writeEEPROM_byte(deviceAddress, eepromAddress, eepromData);
  char arr[20] = {
    'A', 'B', 0x43, 0x44, 0x45, 0x61, 0x62, 0x63, 0x64, 0x65,
    0x31, 0x32, 0x33, 0x34, 0x35, 'Z', 0x37, 0x38, 0x39, 'h',
  };
  writeEEPROM_page(deviceAddress, eepromAddress + 1, (byte *)arr, sizeof(arr));
  char str[] = " CE-KMITL";
  writeEEPROM_page(deviceAddress, eepromAddress + 21 , (byte *)str, sizeof(str));
  //Serial.print(readEEPROM_byte(deviceAddress, eepromAddress), HEX);
  Serial.println(readEEPROM_byte(deviceAddress, eepromAddress), HEX);
}
char Name[16] = {
  'C', 'h', 'i', 'n', 'a', 'k', 'i', 't', 'P', 'i',
    'n', 'c', 'l', 'a', 'y',
  };
char number[9] = {
  '6' , '3' , '0' , '1' , '0','2','2','9'
  };
char deteil[10] = {
  'B' , 'e' , 'a' , 'u' , 't','i','f','u' , 'l'
};

void loop()
{
  int i,j;
  byte ch;
  Serial.println(" ");
  eepromAddress = 21; // first address
  ch = readEEPROM_byte(deviceAddress, eepromAddress); // access the first address from the memory
  while (ch != 0)
  {
    //Serial.print((char) ch); // print content to serial port
    eepromAddress++; // increase address
    ch = readEEPROM_byte(deviceAddress, eepromAddress); // access an address from the memory
  }
  /*ch = readEEPROM_byte(deviceAddress, eepromAddress);
  delay(2000);
  dumpEEPROM(deviceAddress, 0, memorylength);
  delay(2000);*/
  char buffer[16];
  writeEEPROM_page(deviceAddress, 200, (byte *)Name, sizeof(Name));
  writeEEPROM_page(deviceAddress, 400, (byte *)number, sizeof(number));
  writeEEPROM_page(deviceAddress, 600, (byte *)deteil, sizeof(deteil));
  readEEPROM_page(deviceAddress, 400, buffer, 16);
  
  for(i=0 ; i < 8 ; i++){
    //Serial.println(buffer[i]);
    int cat = buffer[i] - 48;
    Serial.print(cat);
    for(j = 0 ; j < cat ; j++){
      digitalWrite(10 , HIGH);
      delay(100);
      digitalWrite(10 , LOW);
      delay(100);
    }
    delay(1000);
  }
  
  delay(2000);





}
/*bool checkEEPROM(byte device, unsigned address, unsigned length)

{
  
  unsigned startAddress = address;
  unsigned stopAddress = address + length;
  for (unsigned i = startAddress; i < stopAddress; i += 16)
  {
    char buffer[16]; // page of EEPROM
    char temp[4];
    sprintf(temp, "%04x: ", i); // print address
    Serial.print(temp);
    readEEPROM_page(device, i, buffer, 16);
    for (int j = 0; j < 16; j++)
    {
      sprintf(temp, "%02x ", byte(buffer[j])); // print data (hexa)
      Serial.print(temp);
      if(byte(buffer[j]) != byte(x[j])){
          return 0;
        }
    }
    
    
  }
  return 1;
}*/

void writeEEPROM_byte(int device, unsigned int address, byte data )
{
  Wire.beginTransmission(device);
  //Wire.write((int)(address >> 8)); // MSB
  Wire.write((int)(address & 0xFF)); // LSB
  Wire.write(data);
  Wire.endTransmission();
  delay(10);
}
byte readEEPROM_byte(int device, unsigned int address )
{
  byte rdata = 0;
  Wire.beginTransmission(device);
  //Wire.write((int)(address >> 8)); // MSB
  Wire.write((int)(address & 0xFF)); // LSB
  Wire.endTransmission();
  Wire.requestFrom(device, 1);
  if (Wire.available())
    rdata = Wire.read();
  return rdata;
}
void writeEEPROM_page(int device, unsigned int address, byte* buffer, byte length )
{
  byte i;
  Wire.beginTransmission(device);
  //Wire.write((int)(address >> 8)); // MSB
  Wire.write((int)(address & 0xFF)); // LSB
  for ( i = 0; i < length; i++)
    Wire.write(buffer[i]);
  Wire.endTransmission();
  delay(10);
}
void dumpEEPROM(byte device, unsigned address, unsigned length)

{
  unsigned startAddress = address;
  unsigned stopAddress = address + length;
  for (unsigned i = startAddress; i < stopAddress; i += 16)
  {
    char buffer[16]; // page of EEPROM
    char temp[4];
    sprintf(temp, "%04x: ", i); // print address
    Serial.print(temp);
    readEEPROM_page(device, i, buffer, 16);
    for (int j = 0; j < 16; j++)
    {
      sprintf(temp, "%02x ", byte(buffer[j])); // print data (hexa)
      Serial.print(temp);
    }
    Serial.print(" ");
    /*for (int j = 0; j < 16; j++) // print data (ASCII)
    {
      if (isprint(buffer[j]))
        Serial.print(buffer[j]);
      else
        Serial.print('.');
    }
    Serial.println(" ");*/
  }
}

byte readEEPROM_page(int device, unsigned int address, byte *buffer, int length )
{
  byte i;
  Wire.beginTransmission(device);
  //Wire.write((int)(address >> 8)); // MSB
  Wire.write((int)(address & 0xFF)); // LSB
  Wire.endTransmission();
  Wire.requestFrom(device, length);
  for ( i = 0; i < length; i++ )
    if (Wire.available())
      buffer[i] = Wire.read();
}
